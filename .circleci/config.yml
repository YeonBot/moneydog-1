version: 2.1
orbs:
  aws-s3: circleci/aws-s3@1.0.11
  aws-ecr: circleci/aws-ecr@6.5.0
  aws-cli: circleci/aws-cli@0.1.15
  slack: circleci/slack@3.4.0

executors:
  my-executor:
    docker: # executor
      - image: circleci/node:10 # the primary container, where your job's commands are run
        environment:
          ENVFILE: $ENVFILE
workflows:
  jimmy-custom-build:
    jobs:
      - lint-and-test:
          filters:
            branches:
              ignore:
                - master
                - dev
      - build-and-push-image:
          requires:
            - lint-and-test
          filters:
            branches:
              only:
                - master
                - dev
jobs:
  lint-and-test:
    executor: my-executor
    steps:
      - slack/approval:
          message: "시작 : circle ci 에 파이프 라인이 올라갔어요 !"
          color: "#42e2f4"
          webhook: $SLACK_WEBHOOK
      - checkout
      - setup_remote_docker
      - run: npm install
      - run: npm run lint
  #      - run: npm run test

  build-and-push-image:
    executor: my-executor
    parameters:
      account-url:
        default: AWS_ECR_ACCOUNT_URL
        type: env_var_name
      aws-access-key-id:
        default: AWS_ACCESS_KEY_ID
        type: env_var_name
      aws-secret-access-key:
        default: AWS_SECRET_ACCESS_KEY
        type: env_var_name
      dockerfile:
        default: Dockerfile
        type: string
      path:
        default: ./
        type: string
      repo:
        default: moneydog
        type: string
      tag:
        default: latest
        type: string
      extra-build-args:
        default: -t test
        type: string
      checkout:
        default: true
        type: boolean
      create-repo:
        default: false
        type: boolean
      profile-name:
        default: default
        type: string
      region:
        default: AWS_REGION
        type: env_var_name
      setup-remote-docker:
        default: false
        type: boolean
      attach-workspace:
        default: false
        type: boolean
      workspace-root:
        default: .
        type: string
    steps:
      - slack/approval:
          message: "시작 : circle ci 에 파이프 라인이 올라갔어요 !"
          color: "#42e2f4"
          webhook: $SLACK_WEBHOOK
      - checkout
      - setup_remote_docker
      - run: npm install
      - run: npm run lint
      - run: echo -e $ENVFILE >> .env
      - run: cat .env
      - run: chmod 755 ./versioning.sh
      - run: sudo ./versioning.sh run
      #      - run: npm run test
      - run: ls
      - run: sudo npm run build
      - slack/notify:
          message: " Lint Test Build 에 성공 했습니다. :smile:"
          color: "#f4e242"
          author_name: "Money Dog"
          title: "Lint-Test-Build 과정 에 성공 했습니다."
          webhook: $SLACK_WEBHOOK
          footer: "Money Dog"
      - aws-s3/sync:
          from: dist
          to: 's3://moneydog/build'
          overwrite: true
      - aws-s3/copy:
          from: dist/
          to: 's3://moneydog/build'
          arguments: '--dryrun'
      - when:
          condition: <<parameters.checkout>>
          steps:
            - checkout
      - aws-cli/install
      - aws-cli/configure:
          aws-access-key-id: <<parameters.aws-access-key-id>>
          aws-region: <<parameters.region>>
          aws-secret-access-key: <<parameters.aws-secret-access-key>>
          profile-name: <<parameters.profile-name>>
      - when:
          condition: <<parameters.attach-workspace>>
          steps:
            - attach_workspace:
                at: <<parameters.workspace-root>>
      - aws-ecr/ecr-login:
          region: <<parameters.region>>
      - aws-ecr/build-image:
          account-url: <<parameters.account-url>>
          dockerfile: <<parameters.dockerfile>>
          extra-build-args: <<parameters.extra-build-args>>
          path: <<parameters.path>>
          repo: <<parameters.repo>>
          tag: <<parameters.tag>>
      - when:
          condition: <<parameters.create-repo>>
          steps:
            - run: >
                aws ecr describe-repositories --profile <<parameters.profile-name>>
                --region $<<parameters.region>> --repository-names
                <<parameters.repo>> > /dev/null 2>&1 || \
                aws ecr create-repository --profile <<parameters.profile-name>>
                --region $<<parameters.region>> --repository-name
                <<parameters.repo>>
      - aws-ecr/push-image:
          account-url: <<parameters.account-url>>
          repo: <<parameters.repo>>
          tag: <<parameters.tag>>
      - slack/status:
          fail_only: true
          success_message: "ECR에 image가 잘 올라갔습니다"
          failure_message: "실패했습니다."
          webhook: $SLACK_WEBHOOK

  deploy-service-update:
    docker:
      - image: << parameters.docker-image-for-job >>
    parameters:
      docker-image-for-job:
        description: The docker image to be used for running this job on CircleCI.
        type: string
        default: 'circleci/python:3.7.1'
      aws-access-key-id:
        type: string
        default: $AWS_ACCESS_KEY_ID
      aws-secret-access-key:
        type: string
        default: $AWS_SECRET_ACCESS_KEY
      aws-region:
        default: $AWS_REGION
      family:
        default: $AWS_TASK_FAMILY
        type: string
      cluster-name:
        default: $AWS_CLUSTER
        type: string
      service-name:
        type: string
        default: $AWS_SERVICE
      deployment-controller:
        description: The deployment controller to use for the service. Defaulted to ECS
        type: enum
        enum:
          - ECS
          - CODE_DEPLOY
        default: ECS
      codedeploy-application-name:
        type: string
        default: $AWS_CODEDEPLOY_NAME
      codedeploy-deployment-group-name:
        type: string
        default: ''
      codedeploy-load-balanced-container-name:
        description: >
          The name of the container to be load-balanced via AWS CodeDeploy.
          Only effective when the deployment-controller parameter value is
          "CODE_DEPLOY".
        type: string
        default: ''
      codedeploy-load-balanced-container-port:
        description: >
          The port of the container to be load-balanced via AWS CodeDeploy.
          Only effective when the deployment-controller parameter value is
          "CODE_DEPLOY".
        type: integer
        default: 80
      container-image-name-updates:
        description: >
          Use this to update the Docker image names and/or tag names of existing
          containers that had been defined in the previous task definition.
          Expected format:
          container=<container-name>,image-and-tag=<image-name>:<tag-name>|image=<image-name>|tag=<tag-name>,container=...,image-and-tag|image|tag=...,
          For each container, specify only either "image-and-tag" or "image" or
          "tag".
          If "image-and-tag" is specified, the container image will be updated to
          the value of the name-value pair.
          If "image" is specified, the image tag defined in the previous task
          definition will be retained, if exists.
          If "tag" is specified, the image name defined in the previous task
          definition will be used.
        type: string
        default: ''
      container-env-var-updates:
        description: >
          Use this to update or set the values of environment variables that will be
          defined for the containers.
          (Existing environment variables not included in this parameter will not be
          removed)
          Expected format:
          container=<container-name>,name=<env-var-name>,value=<env-var-value>,container=...,name=...,value=...,
          Values should not contain commas.
        type: string
        default: ''
      verify-revision-is-deployed:
        description: |
          Runs the verify-revision-is-deployed Orb command to verify that
          the revision has been deployed and is the only deployed revision
          for the service. Note: enabling this may result in the build
          being marked as failed if tasks for older revisions fail to be stopped
          before the max number of polling attempts is reached.
          Does not support ECS services that are of the Blue/Green Deployment type.
        type: boolean
        default: false
      max-poll-attempts:
        description: >
          The maximum number of attempts to poll the deployment status before giving
          up.
          Only in use when verify-revision-is-deployed is set to true.
        type: integer
        default: 50
      poll-interval:
        description: |
          The polling interval, in seconds.
          Only in use when verify-revision-is-deployed is set to true.
        type: integer
        default: 20
      fail-on-verification-timeout:
        description: |
          Whether to exit with an error if the verification of the deployment
          status does not complete within the number of polling attempts.
          Only in use when verify-revision-is-deployed is set to true.
        type: boolean
        default: true
    steps:
      - aws-cli/install
      - aws-cli/configure:
          aws-access-key-id: << parameters.aws-access-key-id >>
          aws-secret-access-key: << parameters.aws-secret-access-key >>
          aws-region: << parameters.aws-region >>
      - update-service:
          family: << parameters.family >>
          cluster-name: << parameters.cluster-name >>
          service-name: << parameters.service-name >>
          deployment-controller: << parameters.deployment-controller >>
          codedeploy-application-name: << parameters.codedeploy-application-name >>
          codedeploy-deployment-group-name: << parameters.codedeploy-deployment-group-name >>
          codedeploy-load-balanced-container-name: << parameters.codedeploy-load-balanced-container-name >>
          codedeploy-load-balanced-container-port: << parameters.codedeploy-load-balanced-container-port >>
          container-image-name-updates: << parameters.container-image-name-updates >>
          container-env-var-updates: << parameters.container-env-var-updates >>
          verify-revision-is-deployed: << parameters.verify-revision-is-deployed >>
          max-poll-attempts: << parameters.max-poll-attempts >>
          poll-interval: << parameters.poll-interval >>
          fail-on-verification-timeout: << parameters.fail-on-verification-timeout >>
