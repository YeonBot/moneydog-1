version: 2.1
orbs:
  aws-s3: circleci/aws-s3@1.0.11
  aws-ecr: circleci/aws-ecr@6.5.0

workflows:
  jimmy-custom-build:
    jobs:
      - build-and-push-image
jobs:
  build-and-push-image:
    docker:
      - image: circleci/node:10 # the primary container, where your job's commands are run
        environment:
          REACT_APP_NODE_API_URL: $REACT_APP_NODE_API_URL
          REACT_APP_IMAGE_URI: $REACT_APP_IMAGE_URI
          DB_SCHEMA: $DB_SCHEMA
          DB_USER: $DB_USER
          DB_PASSWORD: $DB_PASSWORD
          PROD_DB_URL: $PROD_DB_URL
          DEV_DB_URL: $DEV_DB_URL
          TEST_DB_URL: $TEST_DB_URL
          MIGRATE_dbConnectionUri: $MIGRATE_dbConnectionUri
          JWT_SECRET: $JWT_SECRET
          GOOGLE_API_CLIENT_ID: $GOOGLE_API_CLIENT_ID
          GOOGLE_API_CLIENT_SECRET: $GOOGLE_API_CLIENT_SECRET
          GOOGLE_API_REDIRECT_URL: $GOOGLE_API_REDIRECT_URL
          GOOGLE_API_SCOPE: $GOOGLE_API_SCOPE
    parameters:
      account-url:
        default: AWS_ECR_ACCOUNT_URL
        type: env_var_name
      aws-access-key-id:
        default: AWS_ACCESS_KEY_ID
        type: env_var_name
      aws-secret-access-key:
        default: AWS_SECRET_ACCESS_KEY
        type: env_var_name
      dockerfile:
        default: Dockerfile
        type: string
      path:
        default: ./
        type: string
      repo:
        type: string
      tag:
        default: latest
        type: string
      extra-build-args:
        default: -t test
        type: string
      checkout:
        default: true
        type: boolean
      create-repo:
        default: false
        type: boolean
      profile-name:
        default: default
        type: string
      region:
        default: AWS_REGION
        type: env_var_name
      setup-remote-docker:
        default: false
        type: boolean
      attach-workspace:
        default: false
        type: boolean
      workspace-root:
        default: .
        type: string
    steps:
      - checkout # check out the code in the project directory
      - run: npm install
      - run: npm run lint
      - run: npm run test
      - run: npm run build
      - aws-s3/sync:
          from: dist
          to: 's3://moneydog-build/build'
          arguments: |
            --acl public-read
          overwrite: true
      - run: echo aws-s3-sync success
      - aws-s3/copy:
          from: dist/
          to: 's3://moneydog-build'
          arguments: '--dryrun'
      - run: ls
      - when:
          condition: <<parameters.checkout>>
          steps:
            - checkout
            - aws-cli/install
            - aws-cli/configure:
                aws-access-key-id: <<parameters.aws-access-key-id>>
                aws-region: <<parameters.region>>
                aws-secret-access-key: <<parameters.aws-secret-access-key>>
                profile-name: <<parameters.profile-name>>
            - when:
                condition: <<parameters.attach-workspace>>
                steps:
                  - attach_workspace:
                      at: <<parameters.workspace-root>>
            - when:
                condition: <<parameters.setup-remote-docker>>
                steps:
                  - setup_remote_docker
            - ecr-login:
                region: <<parameters.region>>
            - build-image:
                account-url: <<parameters.account-url>>
                dockerfile: <<parameters.dockerfile>>
                extra-build-args: <<parameters.extra-build-args>>
                path: <<parameters.path>>
                repo: <<parameters.repo>>
                tag: <<parameters.tag>>
            - when:
                condition: <<parameters.create-repo>>
                steps:
                  - run: >
                      aws ecr describe-repositories --profile <<parameters.profile-name>>
                      --region $<<parameters.region>> --repository-names
                      <<parameters.repo>> > /dev/null 2>&1 || \

                      aws ecr create-repository --profile <<parameters.profile-name>>
                      --region $<<parameters.region>> --repository-name
                      <<parameters.repo>>
            - push-image:
                account-url: <<parameters.account-url>>
                repo: <<parameters.repo>>
                tag: <<parameters.tag>>
